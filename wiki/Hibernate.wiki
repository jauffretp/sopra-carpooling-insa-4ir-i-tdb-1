#summary One-sentence summary of this page.

= Hibernare=

Hibernate permet d'avoir une interface et une communication avec la base de donnée de manière simple


= Mapping =

S'il on veut mapper un java.beans avec une table, on utilise des annotations.
1) Dans le fichier XML, hibernate.cfg.xml, on rajoute une ligne :
{{{
<mapping class="NewClass"/>
}}}

2)
On indique dans la classe le nom de la table qui correspond
{{{
@Entity
@Table(name="NameofTable")
public class MyClass{
}}}

3) 

On mappe un attribut avec les colonnes de la table
{{{
@Column(name = "nameofCollumn1")
private int attribute1;
@Column(name="nameofCollumn2")
private String attribute2;
@Column(name="nameofCollumn3")
private String attribute3;
}}}

4) 
Pour des cas plus compliqué (ManytoMany, jointure) 

http://www.mkyong.com/tutorials/hibernate-tutorials/

==Transaction avec la base de donnée==

Pour sauvegarder une nouvelle donnée, la procédure est simple : 
Dans la classe DAO il faut les arguments :  
{{{
private SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
private Session session = sessionFactory.openSession();
}}}

puis pour sauvegarder
{{{
public void register(User user){
		session.beginTransaction();
		session.save(user);
		session.getTransaction().commit();
	}
}}}
beginTransaction est la méthode pour commencer une liaison avec la Base de donnée
save()rendre l'attribut dans la table
session.getTransaction().commit(); 
fini la transaction et ferme la liaison.



Pour récupérer tous les élément d'une table de la base de donnée : 
{{{

public List<User> getUser(){
		session.beginTransaction();
		Query query = session.createQuery("from covoiturage.beans.User");
		List<User> ul = query.list();

		session.getTransaction().commit();

		return ul;

}}}

Il faut créer un objet query qui contient en String la requête SQL.